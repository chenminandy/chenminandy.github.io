<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[扯谈 git reset]]></title>
    <url>%2F2018%2F09%2F15%2F%E6%89%AF%E8%B0%88git-reset%2F</url>
    <content type="text"><![CDATA[Background前两天有同事跑过来说他在idea里的git reset方式，有的时候可以，有的时候不可以。不可以的时候经常会多出一些不是他自身希望reverse的代码。。。 Solutionidea 与 git 结合目前idea与git已经结合的非常好了，一些常用的操作既可以通过图形化界面来操作，也可以在terminal里敲git命令来实现。接下来要介绍的是idea的Version Control面板： 面板上其他tab不介绍了，主要介绍Log。这面板可以查看所有分支的commit log记录，不仅仅是本地的branch，远程的分支也可以。面板的上一栏主要是一些筛选和查询条件，经常用的就是Branch:和User:。在上面背景描述的同事就是没有选择Branch，直接找到了自己本身的commit id，然后就reset了，这样的话就把所有分支都reset到这个时间点了，所以就会有其他代码被reverse了。 其实针对同事的需求，git有一种更加的方式，git revert。它可以回滚上一次或是指定commit id的代码，并且作为一次提交，生成新的commit id，这样能保证版本是递增的。而git reset其实是将commit id给回滚，将历史给抹灭了~ 而且如果是已经push到远程仓库的代码，需要有force push权限才能将仓库代码更新，但往往force push是被disable的。 git reset 介绍在图形化操作git reset的时候，发现它提供了好几个选项，我们来着重介绍下各个选项的不同。 对于后面两个Hard、Keep，从他们后面的解释能明白，会直接revert到所指定的commit id那一点，Hard是所有的改动都会丢失，而Keep仅会保留本地的修改记录(local changes will be kept intact)。主要来关注下面两个选项 Soft：Files won‘t change, difference will be staged for commit. Mixed: Default. Files won’t change, difference won’t be staged. 很多人会发现操作了上述两个操作，对于操作的结果似乎是一样的，没有什么区别。但从描述上来看发现对stage是不一样的。那么stage又是一个什么呢？我们需要简单的整理下： git中的文件在本地仓库其实存在三种不同的位置，看下面的图： 工作区：可以称为working tree或是working copy。我们在IDea中修改或是添加一个文件，working tree的内容都发生了改变。 暂存区：可以称为index或是stage。而暂存区是连接工作区和分支的桥梁，当我们使用命令git-add，暂存区的内容就变了，此时暂存区和工作区是同步的。 分支：可以称为branch或是commit、HEAD。只有commit了，我们的代码才真正进入了git仓库。而且我们使用git-commit命令其实就是将暂存区的内容给提交到commit中。 然后再了解参考文献1中的不同参数的效果，得出的结论是soft将commit给reset了，index和working tree还是同步的； 而mixed是将commit和index给reset了，commit和index保持一致，与working tree不一致。 可能看图还是不太理解具体的含义，我们分update的文件和new add的文件来阐述，利用了git diff命令来查看不同工作位置之间的区别。(git diff用途可以看参考文献2） update的文件：update的文件表示之前已经add到暂存区。此时如果git reset –mixed则会把暂存区的文件改动也会回退，保留了工作区的文件改动；而用了git reset –soft的话，会保留和暂存区和工作区的改动。但对于IDea的显示都是一样的, 在local changes中都是有改动的代码。但我们通过git diff 和git diff –cached是能看出他们的区别。如下例：我们选择这个节点来reset：先选择soft来reset：然后再terminal tab页使用git diff命令(查看working tree和index的区别)：在用git diff –cached命令查看(查看index file与commit的差别): 我们将代码恢复到reset前，再选择mixed来reset：然后再terminal tab页使用git diff命令, 发现跟之前的不一样了，是下面的结果：用git diff –cached： 这刚好印证了参考文献1中的两幅图。 new add的文件：此类文件更能反映出soft和mixed区别，直接在IDea的local changes就能发现。如果是选择soft的，则新加的文件还是被git add过，是已经“Add to VCS”；但如果选择mixed，会发现新加的文件没有被git add，是提示需要你重新去 “Add to VCS”。此类文件就不在做详细描述，具体操作一下便知。 GIT虽然只是个简单的源码版本控制工具，但要真正理解，掌握它并不简单。授之以鱼不如授之以渔，且行且珍惜~~~ 参考文献： 【转】git reset 之 soft mixed hard选项的区别 git diff 、git diff –cached 、git diff HEAD区别]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git-reset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first page]]></title>
    <url>%2F2018%2F09%2F15%2Ffirst-page%2F</url>
    <content type="text"><![CDATA[扯扯弄Hexo博客好久，一开始为了折腾theme，看了不下几十个theme的风格，但后面弄了一个半成品放到了github上，结果在我后面重整的时候，一个rm -rf直接干掉了~ 正所谓，不破不立，就网上选取了一篇非常详细的文章 WenBo丨星空灬。十分感谢，让我坚定地走出了第一步。Anyway，on the way~~~ 这篇正如我标题一样，first page，但作为一个码农，怎能去除Hello World的介绍，因此我也就保留了下来，也不让我这“first page”如此的孤单。 回归正题，这篇还是简单的记录下我搭建hexo的一些心路历程。一开始就在盲目的找自己喜欢的theme，甚至还去比较了哪些theme的github的clone次数，可能跟我离9月的那个星座比较近有关。后面比较来比较去还是决定采用NexT的风格，找到了一个文档比较详细的网址：theme-next.iissnan.com 再后面发现这里介绍第三方的集成缺比较详细的介绍，从而又找了上面那篇文章（WenBo丨星空灬）主要用下面几个第三方的插件工具： 热度：LeanCloud 评论：Disqus 第一篇文章也没啥好介绍的，最后再推荐两个之前同事的博客地址： 架构大牛，Zacard’s Notes 算法大牛，Blair’s blog]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
