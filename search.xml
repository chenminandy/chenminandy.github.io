<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[扯扯git-flow]]></title>
    <url>%2F2018%2F09%2F22%2F%E6%89%AF%E6%89%AFgitflow%2F</url>
    <content type="text"><![CDATA[前言经历了一次前无古人，不知还有没有来者的上线，真是重新刷了我的对上线的认识。后面有机会可以单独写写这上线的历程。但由于中间经历了一次上线，导致这篇日志发布的时间拖了好久，争取这两天弄完~~本人对于企业级开发的版本控制觉得还是集中式的管理比较好~ 大家是一个团体，一起维护一个project，所以个人觉得对于fork工作流不感冒，觉得对于开源的项目是一个很好的推荐方式，因为后面是有可能衍变成两个并行的分支。但对于企业的应用开发，这几乎是不可能的，最终还是要统一成一个版本的。 git-flow工作流gitflow工作流实际上是feature工作流的升级版，定义了一个严格的分支模型，规定了在开发流程中所涉及的分支。参考文献1介绍的非常详细，而且git-flow的分支模型也正是从这篇文章中总结得到了，算是git-flow的鼻祖文章。 下面引用了一版与鼻祖类似的gitflow分支模型图： Develop&amp;Master：都是protected的分支，不允许开发人员直接push，稳定的长久的分支。从项目的创建开始，develop是由master衍生出来之后，就永远没有交集，是两条永远不会相交的平行线。不推荐master作为发布分支，他只是记录每次上线发布的里程碑，所有在master上commit的都应打tag标记。 Feature：功能测试分支，只能从develop上拉，在提测，测试功能稳定后就可以合回develop供接下来的功能分支拉取做基准。 Release：发布部署分支，只能从develop上拉，一般是feature分支测试稳定后，合回develop，再从develop拉出release分支。该分支一般用于回归测试，做一些小的bug修复，并用此分支上线。上线完之后要合回master和develop分支，并基于此时的代码打个tag。 Hotfix：线上修复分支，只能从master上拉。用于解决线上问题。解决完之后，和release分支一样，合回master和develop分支，并打个tag。注：之前不用master分支发布还有一个原因就是，目前我们开发的质量不高，经常在生产环境，测试在做回归测试，由于这个那个原因，会发现一些bug，但如果这个时候用master发布的话，用git-flow的话，意味着我们需要不断的拉hotfix分支去解决这些问题，无端地增加了很多开发成本。 除develop和master是长久存在的，其他的分支都是有自己的生命周期，不是一直存在的。某个分支在完成了它的使命，就应该被销毁了~ 尽管git的分支仅仅就是一个指针的指向，但对于开发人员，发现一个project有几百个分支残留着，就很操蛋~~~ git-flow使用为了配合git-flow工作流的开展，其实早有一套现成的git-flow command可供使用。在mac中，通过brew install git-flow就可以安装。Github上也有源码提供：Here. 下面有一些常用命令： 初始化: git flow init 开始新Feature: git flow feature start MYFEATURE Publish一个Feature(也就是push到远程): git flow feature publish MYFEATURE 获取Publish的Feature: git flow feature pull origin MYFEATURE 完成一个Feature: git flow feature finish MYFEATURE 开始一个Release: git flow release start RELEASE [BASE] Publish一个Release: git flow release publish RELEASE 发布Release: git flow release finish RELEASE 别忘了git push –tags 开始一个Hotfix: git flow hotfix start VERSION [BASENAME] 发布一个Hotfix: git flow hotfix finish VERSION 但对于我们作为一个图形化工具的深度使用者，其实有一些版本控制的工具也已经集成了git-flow，我们只需鼠标点击即可完成git-flow工作流。推荐SourceTree 版本控制工具。 工具list： IDEA git-flow plugin SourceTree（Mac &amp; Windows） Tortoise Git （Windows） Conflict别奢望任何一种工作流能解决代码冲突问题。自从诞生了版本控制，这版本冲突就是一个相生相随的产物。只是用了合适的工作流方式，能减少冲突出现的次数。 那么遇到了冲突怎么办，那就一个字，干！！！解决它，解决它的次数多了，也就不是什么问题了。 分支命名规范对于企业开发来说，有个良好的分支命名规范会让我们在工作交流过程中，能够轻易地知晓是在哪个功能模块，哪个阶段的代码。而且同一的分支命名规范，也能利于后续运维的自动化部署，集成测试部署。 注：利用git-flow拉取的feature、release和hotfix分支，自然而然会在对应的feature、release和hotfix目录下 之前公司有过一个分支的命名规范，仅供参考：Name：${1}_${2}_${3}_${4}_${5}${1}: 分支类型，指feature、release和hotfix。${2}：后端还是前端分支，指frontend/backend。${3}：工程名称，一般就是git工程的名称。${4}：本次功能迭代的描述${5}：有意义的时间，譬如，release分支的${5}可以用本次迭代上线的时间代替。 本次扯淡结束~ 参考文献中有两篇文章，有兴趣可以看看，一篇是说gitflow有害，一篇是反驳的。个人觉得适合自己的才是最好的，而且有一个原则，在保证良好的版本控制下，尽量让使用者简单方便的操作~ 如果是为了流程再去设计流程，那就失去了它本身的意义了~ 参考文献 A successful Git branching model Gitflow有害论 GIT 之我见 - 反驳 TW 洞见《GITFLOW 有害论》]]></content>
      <categories>
        <category>工程化与工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git-flow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven跳过测试trick]]></title>
    <url>%2F2018%2F09%2F20%2Fmaven%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95trick%2F</url>
    <content type="text"><![CDATA[前言我们在本地或是开发环境，用maven打包时，想要跳过测试过程，经常会用到-DskipTests=true或是-Dmaven.test.skip=true跳过测试。但两者之间其实是有区别的，虽然达到的目的是一样的。 背景知识maven有三大生命周期，clean、default和site。这也就解释了我们在执行命令的时候是组合的，一般是mvn clean install这样的，clean和install分别是clean和default的一个阶段（phase）。 clean生命周期：清理项目，包含三个phase。 pre-clean：执行清理前需要完成的工作 clean：清理上一次构建生成的文件 post-clean：执行清理后需要完成的工作 default生命周期：构建项目，重要的phase如下： validate：验证工程是否正确，所有需要的资源是否可用。 compile：编译项目的源代码。 test：使用合适的单元测试框架来测试已编译的源代码。这些测试不需要已打包和布署。 package：把已编译的代码打包成可发布的格式，比如jar。 integration-test：如有需要，将包处理和发布到一个能够进行集成测试的环境。 verify：运行所有检查，验证包是否有效且达到质量标准。 install：把包安装到maven本地仓库，可以被其他工程作为依赖来使用。 deploy：在集成或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。 site生命周期：建立和发布项目站点，phase如下： pre-site：生成项目站点之前需要完成的工作 site：生成项目站点文档 post-site：生成项目站点之后需要完成的工作 site-deploy：将项目站点发布到服务器 -DskipTests用命令mvn clean install -DskipTests=true 实际上只是在test这个phase起了作用。再说的通俗一点，就是跳过了单元测试的执行阶段~~ 但测试代码其实跟source code是一样的，也需要编译，会有个test-compile。因此测试代码如果编译失败的话，那意味着这个命令执行失败。可以从下图看出： -Dmaven.test.skip既然上面已经讲得那么露骨了，用命令mvn clean install -Dmaven.test.skip=true是可以成功避开testCompile，并且跳过测试阶段。见下图： 可以看出compile:testCompile和test都被跳过了~~ 后话maven执行测试用例是用maven-surefire-plugin插件来执行的，skipTests是插件的一个属性，有兴趣可以研究下这个插件的具体参数和goal，就会对test有比较深刻的认识。]]></content>
      <categories>
        <category>工程化与工具</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扯谈解决CPU高和内存占用高]]></title>
    <url>%2F2018%2F09%2F17%2F%E6%89%AF%E8%B0%88%E8%A7%A3%E5%86%B3CPU%E9%AB%98%E5%92%8C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E9%AB%98%2F</url>
    <content type="text"><![CDATA[前言其实解决CPU 100%和内存使用率高的，在各大搜索引擎上，一搜就是一大把，所以这篇文章不能算什么技术原创，只能算是笔记，记录一下。年纪大了，经常会忘~~~ 解决CPU高我们经常在项目启动或是运行中，碰到CPU突然飙升很高或是100%，而且一直持续不降。遇到这种情况的时候，有一套标准的流程排查问题： 进入服务器，用top命令查看使用CPU最高的进程： 发现进程1088占用CPU最多，那就分析这个进程的信息 dump改进程的栈文件，用作后续分析 jstack 1088 &gt; dump.txt 查看这个进程有哪些线程在运行，按CPU的使用率排序 top -p 1088 -H 发现线程1748占用CPU最高 将线程id转换16进制 因为dump出来的文件，有每个线程的栈信息，但都是以十六进制显示，故我们需要转换下 printf &quot;%0x\n&quot; 1748得到结果：6d4 查看dump文件 我们可以看出是哪块代码逻辑占用CPU比较多，然后分析代码即可 解决内存占用高jmap命令可以生成heap dump文件，可以用来分析JVM中的内存使用。 然而我们也经常会在系统运行中碰到OOM的问题，此类也可以通过jmap来分析，但并不实时。我们可以在java进程执行时添加-XX:+HeapDumpOnOutOfMemoryError，可以让JVM遇到OOM的时候自动dump出当时的快照，便于我们分析当时的场景。 jmap不仅能生成dump文件，还可以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。 我们看jmap的帮助命令，介绍了jmap的usage和选项配置。 一般用的最多就是jmap [option] &lt;pid&gt; (to connect to running process) 我们还是用上面的top命令的图，top同样可以看出进程使用的内存占用率。还是1088这个进程。 用heap选项查看整个堆的情况。它会打印heap的概要信息，GC使用的算法，heap的配置及使用情况，可以用此来判断内存目前的使用情况以及垃圾回收情况 详细列出来了jvm设置的参数，NewSize、MaxNewSize、NewRatio、SurvivorRatio等等，还有新生代和老年代各个区的分布和使用情况。 用dump将内存文件dump出来，用内存分析软件MAT分析（MAT可以作为一个软件直接下载，mac也支持） jmap -dump:live,format=b,file=dump.hprof 1088 dump的文件有点大，传输需要点耐心~~ 打开MAT分析dump.hprof文件，因为例子中的dump文件并不是内存异常情况下dump，所以分析的只是目前存活对象在使用内存的比例。 我们直接打开Leak Suspects 的Report，它分析目前哪个类对象占比例大，最可疑。 还可以从每个Promblem Suspect中的“Details”点进去，看这个class的引用关系，从而定位代码的可疑位置。 还有一个histo选项，可以直接统计目前堆的对象，包括对象数、内存大小等等。jmap -histo:live 这个命令执行，JVM会先触发gc，然后再统计信息 jmap -histo:live 1088 | more 也能分析出目前内存占用最多的是什么数据类型。附：jmap输出中class name非自定义类的说明 参考文献 JVM调优命令-jmap]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>jstack</tag>
        <tag>jmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扯谈 git reset]]></title>
    <url>%2F2018%2F09%2F15%2F%E6%89%AF%E8%B0%88git-reset%2F</url>
    <content type="text"><![CDATA[Background前两天有同事跑过来说他在idea里的git reset方式，有的时候可以，有的时候不可以。不可以的时候经常会多出一些不是他自身希望reverse的代码。。。 Solutionidea 与 git 结合目前idea与git已经结合的非常好了，一些常用的操作既可以通过图形化界面来操作，也可以在terminal里敲git命令来实现。接下来要介绍的是idea的Version Control面板： 面板上其他tab不介绍了，主要介绍Log。这面板可以查看所有分支的commit log记录，不仅仅是本地的branch，远程的分支也可以。面板的上一栏主要是一些筛选和查询条件，经常用的就是Branch:和User:。在上面背景描述的同事就是没有选择Branch，直接找到了自己本身的commit id，然后就reset了，这样的话就把所有分支都reset到这个时间点了，所以就会有其他代码被reverse了。 其实针对同事的需求，git有一种更加的方式，git revert。它可以回滚上一次或是指定commit id的代码，并且作为一次提交，生成新的commit id，这样能保证版本是递增的。而git reset其实是将commit id给回滚，将历史给抹灭了~ 而且如果是已经push到远程仓库的代码，需要有force push权限才能将仓库代码更新，但往往force push是被disable的。 git reset 介绍在图形化操作git reset的时候，发现它提供了好几个选项，我们来着重介绍下各个选项的不同。 对于后面两个Hard、Keep，从他们后面的解释能明白，会直接revert到所指定的commit id那一点，Hard是所有的改动都会丢失，而Keep仅会保留本地的修改记录(local changes will be kept intact)。主要来关注下面两个选项 Soft：Files won‘t change, difference will be staged for commit. Mixed: Default. Files won’t change, difference won’t be staged. 很多人会发现操作了上述两个操作，对于操作的结果似乎是一样的，没有什么区别。但从描述上来看发现对stage是不一样的。那么stage又是一个什么呢？我们需要简单的整理下： git中的文件在本地仓库其实存在三种不同的位置，看下面的图： 工作区：可以称为working tree或是working copy。我们在IDea中修改或是添加一个文件，working tree的内容都发生了改变。 暂存区：可以称为index或是stage。而暂存区是连接工作区和分支的桥梁，当我们使用命令git-add，暂存区的内容就变了，此时暂存区和工作区是同步的。 分支：可以称为branch或是commit、HEAD。只有commit了，我们的代码才真正进入了git仓库。而且我们使用git-commit命令其实就是将暂存区的内容给提交到commit中。 然后再了解参考文献1中的不同参数的效果，得出的结论是soft将commit给reset了，index和working tree还是同步的； 而mixed是将commit和index给reset了，commit和index保持一致，与working tree不一致。 可能看图还是不太理解具体的含义，我们分update的文件和new add的文件来阐述，利用了git diff命令来查看不同工作位置之间的区别。(git diff用途可以看参考文献2） update的文件：update的文件表示之前已经add到暂存区。此时如果git reset –mixed则会把暂存区的文件改动也会回退，保留了工作区的文件改动；而用了git reset –soft的话，会保留和暂存区和工作区的改动。但对于IDea的显示都是一样的, 在local changes中都是有改动的代码。但我们通过git diff 和git diff –cached是能看出他们的区别。如下例：我们选择这个节点来reset：先选择soft来reset：然后再terminal tab页使用git diff命令(查看working tree和index的区别)：在用git diff –cached命令查看(查看index file与commit的差别): 我们将代码恢复到reset前，再选择mixed来reset：然后再terminal tab页使用git diff命令, 发现跟之前的不一样了，是下面的结果：用git diff –cached： 这刚好印证了参考文献1中的两幅图。 new add的文件：此类文件更能反映出soft和mixed区别，直接在IDea的local changes就能发现。如果是选择soft的，则新加的文件还是被git add过，是已经“Add to VCS”；但如果选择mixed，会发现新加的文件没有被git add，是提示需要你重新去 “Add to VCS”。此类文件就不在做详细描述，具体操作一下便知。 GIT虽然只是个简单的源码版本控制工具，但要真正理解，掌握它并不简单。授之以鱼不如授之以渔，且行且珍惜~~~ 参考文献： 【转】git reset 之 soft mixed hard选项的区别 git diff 、git diff –cached 、git diff HEAD区别]]></content>
      <categories>
        <category>工程化与工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git-reset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first page]]></title>
    <url>%2F2018%2F09%2F15%2Ffirst-page%2F</url>
    <content type="text"><![CDATA[扯扯弄Hexo博客好久，一开始为了折腾theme，看了不下几十个theme的风格，但后面弄了一个半成品放到了github上，结果在我后面重整的时候，一个rm -rf直接干掉了~ 正所谓，不破不立，就网上选取了一篇非常详细的文章 WenBo丨星空灬。十分感谢，让我坚定地走出了第一步。Anyway，on the way~~~ 这篇正如我标题一样，first page，但作为一个码农，怎能去除Hello World的介绍，因此我也就保留了下来，也不让我这“first page”如此的孤单。 回归正题，这篇还是简单的记录下我搭建hexo的一些心路历程。一开始就在盲目的找自己喜欢的theme，甚至还去比较了哪些theme的github的clone次数，可能跟我离9月的那个星座比较近有关。后面比较来比较去还是决定采用NexT的风格，找到了一个文档比较详细的网址：theme-next.iissnan.com 再后面发现这里介绍第三方的集成缺比较详细的介绍，从而又找了上面那篇文章（WenBo丨星空灬）主要用下面几个第三方的插件工具： 热度：LeanCloud 评论：Disqus 第一篇文章也没啥好介绍的，最后再推荐两个之前同事的博客地址： 架构大牛，Zacard’s Notes 算法大牛，Blair’s blog DBA大牛，似水年华–沉浮]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
